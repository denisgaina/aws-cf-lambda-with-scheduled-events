Parameters:
  UniqueName: 
    Type: String
    Default: "denis-gaina-workshop"
  EmailAddress:
    Type: String
    Default: "testingbill360@gmail.com"
  LambdaS3Key:
    Type: String
    Default: "lambda/code.zip"

Resources: 
  MySSMParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub "${UniqueName}-parameter"
      Type: String
      Value: "https://docs.aws.amazon.com/lambda/latest/dg/welcome.html"
      Description: Some secret for My Application

  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${UniqueName}-lambda"

  IamRoleLambdaExecution:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${UniqueName}-role"  
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      Policies:
      - PolicyName: !Sub "${UniqueName}-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogStream"
            - "logs:CreateLogGroup"
            - "logs:PutLogEvents"
            Resource:
            - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${UniqueName}-lambda:*"
      - PolicyName: !Sub "${UniqueName}-ssm-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "ssm:GetParameter"
            Resource:
            - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${UniqueName}-parameter"

  MyLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref "UniqueName"
        S3Key: !Ref "LambdaS3Key"
      Description: "Performs a periodic check of the given site, erroring out on test failure."
      FunctionName: !Sub "${UniqueName}-lambda"
      Handler: "code.lambda_handler"
      MemorySize: 128
      PackageType: "Zip"
      Role: !GetAtt "IamRoleLambdaExecution.Arn"
      Runtime: "python3.10"
      Timeout: 10
      Tags: 
        - Key: "Owner"
          Value: !Ref "UniqueName"
      Environment: 
        Variables:
          SITE_NAME: !Sub "${UniqueName}-parameter"
          EXPECTED: "What is AWS Lambda?"

  MyLambdaTrigger:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub "${UniqueName}-trigger"
      State: "ENABLED"
      Description: !Sub "trigger for the ${UniqueName} lambda"
      ScheduleExpression: "rate(5 minutes)"
      Targets: 
        - Id: !Sub "${UniqueName}-trigger"
          Arn: !GetAtt MyLambda.Arn

  InvokeLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MyLambdaTrigger.Arn

  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub "${UniqueName}-topic" 

  SNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Protocol: "email"
      TopicArn:
        Ref: "SNSTopic"
      Endpoint: !Ref "EmailAddress"

  MyCloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: An alarm for when the Lambda function fails
      Namespace: AWS/Lambda
      MetricName: Errors
      Statistic: Sum
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref SNSTopic
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: MyLambda
